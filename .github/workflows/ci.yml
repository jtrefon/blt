name: Build, Test, and Release

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test_and_lint:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Run linter checks
        run: cargo clippy --all -- -D warnings
      - name: Run tests
        run: cargo test --workspace --exclude blt_python

  test_python:
    name: Test Python Bindings
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Install maturin and pytest
        run: pip install maturin pytest
      - name: Build and test Python bindings
        working-directory: blt_python
        run: |
          python -m venv test_env
          source test_env/bin/activate
          pip install maturin pytest
          maturin develop
          python -m pytest tests/ -v

  build:
    name: Build Release Binaries
    needs: [test_and_lint, test_python]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: blt-linux-amd64
            asset_name: blt-linux-amd64.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: blt-macos-amd64
            asset_name: blt-macos-amd64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: blt-macos-arm64
            asset_name: blt-macos-arm64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: blt-windows-amd64
            asset_name: blt-windows-amd64.zip
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Build binary
        run: cargo build --release --locked --target ${{ matrix.target }}
      - name: Package for release
        shell: bash
        run: |
          mkdir staging
          if [ "${{ runner.os }}" = "Windows" ]; then
            cp target/${{ matrix.target }}/release/blt.exe staging/
            cd staging
            7z a ../${{ matrix.asset_name }} .
          else
            cp target/${{ matrix.target }}/release/blt staging/
            cd staging
            tar czf ../${{ matrix.asset_name }} .
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.asset_name }}

  build_python:
    name: Build Python Wheels
    needs: [test_and_lint, test_python]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Install maturin
        if: matrix.os == 'ubuntu-latest'
        run: pip install maturin[patchelf]
      - name: Install maturin (non-linux)
        if: matrix.os != 'ubuntu-latest'
        run: pip install maturin
      - name: Build Python wheel
        working-directory: blt_python
        run: maturin build --release --target ${{ matrix.target }} --out dist
      - name: Upload Python wheels
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-${{ matrix.os }}-${{ matrix.target }}
          path: blt_python/dist/*.whl

  publish_python:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test_and_lint, test_python, build_python]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # For trusted publishing to PyPI
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: python-wheels-*
          path: wheels
          merge-multiple: true
      - name: Display structure of downloaded files
        run: ls -R wheels
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: wheels/
          skip-existing: true
          verbose: true

  create_github_release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, build_python]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
      - name: Display structure of downloaded files
        run: ls -R artifacts
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: "artifacts/*"
          fail_on_unmatched_files: true

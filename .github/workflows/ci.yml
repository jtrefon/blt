name: Build, Test, and Release

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test_and_lint:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Run linter checks
        run: cargo clippy --all -- -D warnings
      - name: Run tests
        run: cargo test --all

  build:
    name: Build Release Binaries
    needs: test_and_lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: blt-linux-amd64
            asset_name: blt-linux-amd64.tar.gz
          - os: macos-latest
            artifact_name: blt-macos-amd64
            asset_name: blt-macos-amd64.tar.gz
          - os: windows-latest
            artifact_name: blt-windows-amd64
            asset_name: blt-windows-amd64.zip
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Build binary
        run: cargo build --release --locked
      - name: Package for release
        shell: bash
        run: |
          mkdir staging
          if [ "${{ runner.os }}" = "Windows" ]; then
            cp target/release/blt.exe staging/
            cd staging
            7z a ../${{ matrix.asset_name }} .
          else
            cp target/release/blt staging/
            cd staging
            tar czf ../${{ matrix.asset_name }} .
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.asset_name }}

  create_github_release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
      - name: Display structure of downloaded files
        run: ls -R artifacts
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: "artifacts/*"
          fail_on_unmatched_files: true

name: Rust CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy, rustfmt

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-targets --all-features

      - name: Build release binary
        run: cargo build --release --all-targets

      - name: Prepare release artifact (Linux)
        if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
        run: |
          mkdir -p artifacts
          cp target/release/blt artifacts/blt-linux-amd64
          cd artifacts
          tar -czvf blt-linux-amd64.tar.gz blt-linux-amd64
          # sha256sum blt-linux-amd64.tar.gz > blt-linux-amd64.tar.gz.sha256 # Optional: create checksum
          cd ..

      - name: Upload Linux artifact
        if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: blt-linux-amd64
          path: artifacts/blt-linux-amd64.tar.gz
          # path: | # Optional: upload checksum as well
          #  artifacts/blt-linux-amd64.tar.gz
          #  artifacts/blt-linux-amd64.tar.gz.sha256

  # Optional: Create GitHub Release (only for tags)
  create_release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build_and_test # Depends on the build and test job
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Downloads all artifacts to artifacts/artifact_name/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Release of version ${{ github.ref_name }}
            Please find the attached assets.
          draft: false
          prerelease: false

      - name: Upload Release Asset (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/blt-linux-amd64/blt-linux-amd64.tar.gz
          asset_name: blt-${{ github.ref_name }}-linux-amd64.tar.gz
          asset_content_type: application/gzip

          # Example for other platforms if you build them:
          # - name: Upload Release Asset (Windows)
          #   asset_path: ./artifacts/blt-windows-amd64/blt-windows-amd64.zip
          #   asset_name: blt-${{ github.ref_name }}-windows-amd64.zip
          #   asset_content_type: application/zip
          # - name: Upload Release Asset (macOS)
          #   asset_path: ./artifacts/blt-macos-amd64/blt-macos-amd64.tar.gz
          #   asset_name: blt-${{ github.ref_name }}-macos-amd64.tar.gz
          #   asset_content_type: application/gzip

name: Rust CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*' # Trigger on version tags like v0.1.0, v1.2.3
      - 'v*.*.*-*' # Trigger on version tags with pre-release suffixes like v0.1.0-alpha
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_test:
    name: Build & Test (Multi-Platform) # Changed to a static name
    runs-on: ${{ matrix.os_runner }}
    strategy:
      matrix:
        include:
          - os_name: linux
            os_runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: x86_64
            artifact_suffix: tar.gz
          - os_name: macos
            os_runner: ubuntu-latest # Cross-compiling from Linux
            target: aarch64-apple-darwin
            arch: aarch64
            artifact_suffix: tar.gz
            use_zig: true # Flag to install Zig for cross-compilation
          - os_name: windows
            os_runner: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x86_64
            artifact_suffix: zip

    steps:
      - uses: actions/checkout@v4

      - name: Install Zig (for cross-compilation)
        if: matrix.use_zig == true
        run: |
          wget https://ziglang.org/builds/zig-linux-x86_64-0.12.0-dev.1604+caae40c21.tar.xz
          tar -xf zig-linux-x86_64-0.12.0-dev.1604+caae40c21.tar.xz
          echo "$(pwd)/zig-linux-x86_64-0.12.0-dev.1604+caae40c21" >> $GITHUB_PATH

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }} # Install specific target
          override: true
          components: clippy, rustfmt

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget xz-utils

      - name: Install Zig (for cross-compilation)
        if: matrix.use_zig == true
        run: |
          wget https://ziglang.org/download/0.12.0/zig-linux-x86_64-0.12.0.tar.xz
          tar -xf zig-linux-x86_64-0.12.0.tar.xz
          echo "$(pwd)/zig-linux-x86_64-0.12.0" >> $GITHUB_PATH
          echo "ZIG_PATH=$(pwd)/zig-linux-x86_64-0.12.0" >> $GITHUB_ENV

      - name: Build
        env:
          CARGO_TARGET_AARCH64_APPLE_DARWIN_LINKER: ${{ env.ZIG_PATH }}/zig cc -target aarch64-macos-gnu
        run: |
          if [ "${{ matrix.use_zig }}" = "true" ]; then
            cargo build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi


      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --target ${{ matrix.target }} --all-features -- -D warnings

      - name: Run tests
        # For cross-compilation, running tests might not be straightforward if the target architecture
        # is different from the runner, unless using an emulator.
        # We'll run tests only for native builds or if an emulator is set up.
        # For now, let's assume tests are primarily for the native linux build or if cargo test supports --target for all.
        # This might need refinement. For simplicity, we run it for all, but it might fail for cross-targets.
        run: cargo test --target ${{ matrix.target }} --all-features

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package release
        if: success() && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
        shell: bash
        run: |
          # Create artifacts directory
          mkdir -p artifacts
          
          # Copy the built binary to a consistent name for packaging
          if [ "${{ matrix.os_name }}" = "windows" ]; then
            cp target/${{ matrix.target }}/release/blt.exe artifacts/blt-executable.exe
            # Package for Windows
            cd artifacts
            7z a blt-${{ matrix.os_name }}-${{ matrix.arch }}.zip blt-executable.exe
            cd ..
          else
            cp target/${{ matrix.target }}/release/blt artifacts/blt-executable
            # Package for Linux/macOS
            cd artifacts
            tar -czvf blt-${{ matrix.os_name }}-${{ matrix.arch }}.tar.gz blt-executable
            cd ..
          fi
          
          # Set output for artifact name
          echo "artifact_name=blt-${{ matrix.os_name }}-${{ matrix.arch }}.${{ matrix.artifact_suffix }}" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: blt-${{ matrix.os_name }}-${{ matrix.arch }} # e.g., blt-linux-x86_64
          path: ../artifacts/blt-${{ matrix.os_name }}-${{ matrix.arch }}.${{ matrix.artifact_suffix }}

  # Optional: Create GitHub Release (only for tags)
  create_release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build_and_test # Depends on the build and test job
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Downloads all artifacts into an 'artifacts' directory, each in a subdirectory named after the artifact name from the upload step.
          # e.g., artifacts/blt-linux-x86_64/blt-linux-x86_64.tar.gz
          # e.g., artifacts/blt-macos-aarch64/blt-macos-aarch64.tar.gz
          # e.g., artifacts/blt-windows-x86_64/blt-windows-x86_64.zip

      - name: List downloaded artifacts # For debugging
        run: ls -R artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Release of version ${{ github.ref_name }}
            Please find the attached assets.
          draft: false
          prerelease: false

      - name: Upload Release Asset (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/blt-linux-x86_64/blt-linux-x86_64.tar.gz # Adjusted path based on new artifact naming
          asset_name: blt-${{ github.ref_name }}-linux-x86_64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (macOS aarch64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/blt-macos-aarch64/blt-macos-aarch64.tar.gz
          asset_name: blt-${{ github.ref_name }}-macos-aarch64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (Windows x86_64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/blt-windows-x86_64/blt-windows-x86_64.zip
          asset_name: blt-${{ github.ref_name }}-windows-x86_64.zip
          asset_content_type: application/zip
